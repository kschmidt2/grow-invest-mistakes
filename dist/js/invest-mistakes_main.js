Highcharts.setOptions({lang:{thousandsSep:","}});let chartIdMistakes=document.getElementById("chart-container-invest-mistakes");function drawHighcharts(){Highcharts.chart(chartIdMistakes,{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},series:[{data:[26418,8358,1908,-1850,-4153]}],plotOptions:{series:{groupPadding:.1},bar:{dataLabels:{enabled:!0,formatter:function(){return this.y<0?"-$"+Highcharts.numberFormat(-1*this.y,0,".",","):"$"+Highcharts.numberFormat(this.y,0,".",",")}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5,categories:["Stayed fully invested","Missed 10 best days","Missed 20 best days","Missed 30 best days","Missed 40 best days"]},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},tickAmount:5,min:-1e4,max:3e4},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdMistakes.innerHTML){let e=document.getElementsByClassName("chart-area-invest-mistakes");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
